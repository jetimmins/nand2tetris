<class>
  <keyword>class</keyword>
  <identifier>ComplexExpressions</identifier>
  <symbol>{</symbol>
  <classVarDec>
    <keyword>field</keyword>
    <keyword>int</keyword>
    <identifier>myField</identifier>
    <symbol>;</symbol>
  </classVarDec>
  <subroutineDec>
    <keyword>constructor</keyword>
    <identifier>Program</identifier>
    <identifier>new</identifier>
    <symbol>(</symbol>
    <parameterList>
      <keyword>int</keyword>
      <identifier>x</identifier>
    </parameterList>
    <symbol>)</symbol>
    <subroutineBody>
      <symbol>{</symbol>
      <varDec>
        <keyword>var</keyword>
        <identifier>Array</identifier>
        <identifier>a</identifier>
        <symbol>;</symbol>
      </varDec>
      <varDec>
        <keyword>var</keyword>
        <keyword>boolean</keyword>
        <identifier>b</identifier>
        <symbol>;</symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword>let</keyword>
          <identifier>a</identifier>
          <symbol>=</symbol>
          <expression>
            <term>
              <identifier>Array</identifier>
              <symbol>.</symbol>
              <identifier>new</identifier>
              <symbol>(</symbol>
              <expressionList>
              </expressionList>
              <symbol>)</symbol>
            </term>
          </expression>
          <symbol>;</symbol>
        </letStatement>
        <letStatement>
          <keyword>let</keyword>
          <identifier>b</identifier>
          <symbol>=</symbol>
          <expression>
            <term>
              <keyword>false</keyword>
            </term>
          </expression>
          <symbol>;</symbol>
        </letStatement>
        <letStatement>
          <keyword>let</keyword>
          <identifier>myField</identifier>
          <symbol>=</symbol>
          <expression>
            <term>
              <integerConstant>12</integerConstant>
            </term>
          </expression>
          <symbol>;</symbol>
        </letStatement>
        <letStatement>
          <keyword>let</keyword>
          <identifier>a</identifier>
          <symbol>[</symbol>
          <expression>
            <term>
              <integerConstant>0</integerConstant>
            </term>
          </expression>
          <symbol>]</symbol>
          <symbol>=</symbol>
          <expression>
            <term>
              <identifier>x</identifier>
            </term>
            <symbol>+</symbol>
            <term>
              <identifier>myField</identifier>
            </term>
          </expression>
          <symbol>;</symbol>
        </letStatement>
        <ifStatement>
          <keyword>if</keyword>
          <symbol>(</symbol>
          <expression>
            <term>
              <symbol>~</symbol>
              <term>
                <symbol>(</symbol>
                <expression>
                  <term>
                    <identifier>a</identifier>
                    <symbol>[</symbol>
                    <expression>
                      <term>
                        <identifier>x</identifier>
                      </term>
                      <symbol>-</symbol>
                      <term>
                        <identifier>myField</identifier>
                      </term>
                    </expression>
                    <symbol>]</symbol>
                  </term>
                  <symbol>&gt;</symbol>
                  <term>
                    <integerConstant>42</integerConstant>
                  </term>
                </expression>
                <symbol>)</symbol>
              </term>
            </term>
          </expression>
          <symbol>)</symbol>
          <symbol>{</symbol>
          <statements>
            <doStatement>
              <keyword>do</keyword>
              <identifier>something</identifier>
              <symbol>.</symbol>
              <identifier>some</identifier>
              <symbol>(</symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier>a</identifier>
                    <symbol>[</symbol>
                    <expression>
                      <term>
                        <integerConstant>2</integerConstant>
                      </term>
                      <symbol>-</symbol>
                      <term>
                        <integerConstant>2</integerConstant>
                      </term>
                      <symbol>-</symbol>
                      <term>
                        <identifier>x</identifier>
                      </term>
                    </expression>
                    <symbol>]</symbol>
                  </term>
                </expression>
                <symbol>,</symbol>
                <expression>
                  <term>
                    <symbol>~</symbol>
                    <term>
                      <symbol>(</symbol>
                      <expression>
                        <term>
                          <identifier>b</identifier>
                        </term>
                      </expression>
                      <symbol>)</symbol>
                    </term>
                  </term>
                </expression>
              </expressionList>
              <symbol>)</symbol>
              <symbol>;</symbol>
            </doStatement>
          </statements>
          <symbol>}</symbol>
        </ifStatement>
      </statements>
      <symbol>}</symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol>}</symbol>
</class>
