// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // Current bug: A instruction should emit A from ALU, right now it spits out garbage from control flags. A instruction needs to set 110000.


    PARTS:
    //decode instr for A
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain); // A or C instruction
    And(a=instruction[15], b=instruction[5], out=cwritea); // C instruction and d1 selected
    Not(in=instruction[15], out=awritea); // A instruction
    Or(a=awritea, b=cwritea, out=writea);
    ARegister(in=ain, load=writea, out=aout, out[0..14]=addressM);

    //decode A or M output based on 'a' bit selector
    Mux16(a=aout, b=inM, sel=instruction[12], out=aormout);

    //decode instr for D
    And(a=instruction[15], b=instruction[4], out=writed); // C instruction and d2 selected
    DRegister(in=aluout, load=writed, out=dout);

    // ALU inputs from registers and control bits fed by 'c' instruction bits
    ALU(x=dout, y=aormout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zrout, ng=ngout);

    // decode ALU output
    And(a=instruction[15], b=instruction[3], out=writeM); // Write ALU output to memory if C instruction and d3 selected

    // decode jumps
    Or(a=ngout, b=zrout, out=ltez);
    Not(in=ltez, out=gtz);
    Not(in=ngout, out=notng);
    Not(in=zrout, out=notzr);

    And(a=instruction[1], b=instruction[0], out=gtej);
    And(a=instruction[2], b=instruction[0], out=notj);
    And(a=instruction[2], b=instruction[1], out=ltej);

    // calculate jumps
    And(a=instruction[2], b=ngout, out=jlt);
    And(a=instruction[1], b=zrout, out=jz);
    And(a=instruction[0], b=gtz, out=jgt);
    And(a=gtej, b=notng, out=jge);
    And(a=notj, b=notzr, out=jnz);
    And(a=ltej, b=ltez, out=jle);
    And(a=ltej, b=instruction[0], out=jmp);
    Or8Way(in[0]=jlt, in[1]=jlt, in[2]=jz, in[3]=jgt, in[4]=jge, in[5]=jnz, in[6]=jle, in[7]=jmp, out=tryjump);
    And(a=tryjump, b=instruction[15], out=jump);
    PC(in=aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}