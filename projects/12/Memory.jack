// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array mem, head;
    static int MAX_ADDR, MIN_SPLIT_SIZE;

    /** Initializes the class. */
    function void init() {
        let MAX_ADDR = 16384;
        let MIN_SPLIT_SIZE = 4; // seg header (2), reserved dealloc block (1), free space (1). Increase to bump free space requirement
        let mem = 0;
        let head = 2048;
        let head[0] = MAX_ADDR - head;
        let head[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if (~(address < 0) & ~(address > 32767)) {
            return mem[address];
        }

        return 0;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        if (~(address < 0) & ~(address > 32767)) {
            let mem[address] = value;
        }

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment;
        let segment = Memory._alloc(size);

        if (segment = 0) {
            do Memory.defrag();
            let segment = Memory._alloc(size);

            if (segment = 0) {
                do Sys.error(0); // OOM code
                return -1;
            }
        }

        return segment;
    }

    /** First fit algo */
    function int _alloc(int size) {
        var Array cur;
        var Array block;
        var Array prev;
        let cur = head;
        let prev = null;

        while (~(cur = null)) {
            if (cur[0] - size > 0) {
                if (cur[0] - size < MIN_SPLIT_SIZE) { // return whole seg if can't maintain 2 word header + 1 word reserve dealloc + n words free
                    if (~(prev = null)) {
                        let prev[1] = cur[1];
                    } else {
                        let head = cur[1];
                    }
                }

                let block = cur + cur[0] - size;
                let cur[0] = cur[0] - size - 1;
                let block[-1] = size + 1;
                return block;
            } else {
                let prev = cur;
                let cur = cur[1];
            }
        }

        return 0;
    }

    /** Traverses the linked list and for each segment checks if the
     *  next segment is contiguous. If so, merges segments. */
    function void defrag() {
        var Array cur;
        var Array next;
        let cur = head;
        let next = null;

        while(~(cur = null)) {
            let next = cur[1];

            if (next = null) {
                return;
            }

            if (cur[0] + cur + 1 = next) {
                let cur[1] = next[1];
                let cur[0] = cur[0] + next[0];
            }

            let cur = cur[1];
        }

        return;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o = o - 1;
        let o[1] = head;
        let head = o;

        return;
    }
}
