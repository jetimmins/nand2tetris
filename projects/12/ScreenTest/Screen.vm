function Screen.init 0
push constant 0
not
pop static 0
push constant 16384
pop static 1
push constant 512
pop static 2
push constant 256
pop static 3
push constant 0
return
function Screen.clearScreen 1
push static 0
pop local 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push static 2
push constant 1
sub
push static 3
push constant 1
sub
call Screen.drawRectangle 4
pop temp 0
push local 0
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push static 1
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
call Memory.peek 1
pop local 1
push argument 0
push constant 15
and
call Math.twoToThe 1
pop local 2
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push local 2
or
pop local 1
goto IF_END0
label IF_FALSE0
push local 1
push local 2
not
and
pop local 1
label IF_END0
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 2
push argument 2
push argument 0
sub
pop local 0
push argument 3
push argument 1
sub
pop local 1
push local 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 1
push argument 3
call Screen.drawVertical 3
pop temp 0
push constant 0
return
label IF_FALSE0
push local 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontal 3
pop temp 0
push constant 0
return
label IF_FALSE1
push argument 0
push argument 1
push local 0
push local 1
call Screen.drawDiagonal 4
pop temp 0
push constant 0
return
function Screen.drawVertical 1
push argument 1
push argument 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop local 0
push argument 2
pop argument 1
push local 0
pop argument 2
label IF_FALSE0
label WHILE_EXP0
push argument 1
push argument 2
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawHorizontal 3
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 1
push argument 1
pop argument 0
push local 1
pop argument 1
label IF_FALSE0
push constant 16
push argument 0
push constant 16
call Math.mod 2
sub
pop local 0
push argument 1
push argument 0
sub
push constant 8
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
label WHILE_EXP0
push argument 0
push argument 1
lt
not
if-goto WHILE_END0
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
label IF_FALSE1
label WHILE_EXP1
push local 0
push constant 0
gt
not
if-goto WHILE_END1
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP1
label WHILE_END1
label WHILE_EXP2
push argument 0
push constant 16
add
push argument 1
lt
not
if-goto WHILE_END2
push argument 0
push argument 2
call Screen.drawChunk 2
pop temp 0
push argument 0
push constant 16
add
pop argument 0
goto WHILE_EXP2
label WHILE_END2
label WHILE_EXP3
push argument 0
push argument 1
lt
not
if-goto WHILE_END3
push argument 0
push argument 2
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Screen.drawChunk 1
push static 1
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push local 0
push static 0
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawDiagonal 5
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
push argument 3
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 4
goto IF_END0
label IF_FALSE0
push constant 1
pop local 4
label IF_END0
push argument 2
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
call Math.abs 1
pop argument 2
push constant 1
neg
pop local 3
goto IF_END1
label IF_FALSE1
push constant 1
pop local 3
label IF_END1
label WHILE_EXP0
push local 0
push argument 2
gt
not
push argument 3
push constant 0
lt
not
push local 1
push argument 3
gt
not
and
push argument 3
push constant 0
lt
push local 1
push argument 3
lt
not
and
or
and
not
if-goto WHILE_END0
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 3
add
pop local 0
push local 2
push argument 3
push local 4
call Math.multiply 2
add
pop local 2
goto IF_END2
label IF_FALSE2
push local 1
push local 4
add
pop local 1
push local 2
push argument 2
sub
pop local 2
label IF_END2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawRectangle 0
label WHILE_EXP0
push argument 1
push argument 3
gt
not
not
if-goto WHILE_END0
push argument 0
push argument 2
push argument 1
call Screen.drawHorizontal 3
pop temp 0
push argument 1
push constant 1
add
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push argument 2
push constant 181
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 2
neg
pop local 1
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label WHILE_EXP0
push local 1
push argument 2
gt
not
not
if-goto WHILE_END0
push local 2
push local 1
push local 1
call Math.multiply 2
sub
call Math.sqrt 1
pop local 0
push argument 0
push local 0
sub
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawHorizontal 3
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
