// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        var int j;
        let i = 0;
        let j = 1;
        let twoToThe = Array.new(16);
        while (i < 15) {
            let twoToThe[i] = j;
            let i = i + 1;
            let j = j + j;
        }

        let twoToThe[15] = 32767 + 1;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
         var int sum, shiftedX, j;
         let sum = 0;
         let j = 0;
         let shiftedX = x;

         if (x = 0) {
             return 0;
         }

         if (y = 0) {
             return 0;
         }

         while (j < 16) {
             if (Math.bit(y, j)) {
                 let sum = sum + shiftedX;
             }

             let shiftedX = shiftedX + shiftedX;
             let j = j + 1;
         }

         return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;
        var boolean xneg, yneg;

        let result = 0;
        let xneg = x < 0;
        let yneg = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let result = Math._divide(x, y);
        if (xneg = yneg) {
            return result;
        } else {
            return -result;
        }
    }

    function int _divide(int x, int y) {
        var int q;

        if (y < 0) { // check overflow
            return 0;
        }

        let q = Math._divide(x, y+y);

        if (x - (2 * q * y) < y) {
            return q + q;
        } else {
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int est, estsqr;
        let y = 0;
        let j = 7; // (16 bit / 2) - 1
        while (~(j < 0)) {
            let est = y + twoToThe[j];
            let estsqr = est * est;

            if (~(estsqr > x) & (estsqr > 0)) { // overflow
                let y = y + twoToThe[j];
            }

            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    function boolean bit(int x, int j) { // negate = 0?
        return x & twoToThe[j];
    }

    function int mod(int x, int y) {
        var int q;
        let q = Math.divide(x, y);
        return x - Math.multiply(y, q);
    }
}
